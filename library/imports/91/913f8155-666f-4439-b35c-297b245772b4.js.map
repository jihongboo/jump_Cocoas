{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Star.ts"],"names":[],"mappings":";;;;;AACM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAI1C;IAA0B,wBAAY;IADtC;QAAA,qEA2DC;QAzDG,2BAA2B;QAE3B,gBAAU,GAAG,CAAC,CAAC;;IAuDnB,CAAC;IAnDG,eAAe;IAEf,gCAAiB,GAAjB;QACI,qBAAqB;QACrB,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC/C,iBAAiB;QACjB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACnD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,uBAAQ,GAAR;QACI,kCAAkC;QAClC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QACzB,kBAAkB;QAClB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED,oBAAK,GAAL;IAEA,CAAC;IAED,+BAAgB,GAAhB,UAAkB,KAAc,EAAE,IAAiB;QAC/C,IAAI,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,EAAE,CAAC,CAAC;QAC3E,IAAI,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QACzD,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACvB,qBAAqB;IACzB,CAAC;IAED,gCAAiB,GAAjB;QACI,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpB,CAAC;IAED,6BAAc,GAAd,UAAgB,OAAO,EAAE,YAAY,EAAE,aAAa;QAChD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAGD,qBAAM,GAAN,UAAQ,EAAU;QACd,0BAA0B;QAC1B,IAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;QAChE,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC;QAE/E,uBAAuB;QACvB,oDAAoD;QACpD,gBAAgB;QAChB,uBAAuB;QACvB,cAAc;QACd,IAAI;IACR,CAAC;IAtDD;QADC,QAAQ;4CACM;IAHN,IAAI;QADhB,OAAO;OACK,IAAI,CA0DhB;IAAD,WAAC;CA1DD,AA0DC,CA1DyB,EAAE,CAAC,SAAS,GA0DrC;AA1DY,oBAAI","file":"","sourceRoot":"../../../../assets/scripts","sourcesContent":["\nconst {ccclass, property} = cc._decorator;\nimport { Game } from './Game';\n\n@ccclass\nexport class Star extends cc.Component {\n    // 星星和主角之间的距离小于这个数值时，就会完成收集\n    @property\n    pickRadius = 0;\n\n    game: Game;\n\n    // onLoad () {}\n\n    getPlayerDistance () :number {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    }\n\n    onPicked () {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore();\n    }\n\n    start () {\n\n    }\n\n    onCollisionEnter (other: cc.Node, self: cc.Collider) {\n        let action = cc.moveBy(0.1, cc.v2(0, 100)).easing(cc.easeCubicActionOut());\n        let finished = cc.callFunc(this.animationFinished, this);\n        let a = cc.sequence(action, finished);\n        this.node.runAction(a);\n        // self.node.y += 50;\n    }\n\n    animationFinished () {\n        this.onPicked();\n    }\n\n    onBeginContact (contact, selfCollider, otherCollider) {\n        console.log(\"aaa\");\n    }\n    \n\n    update (dt: number) {\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n\n        // 每帧判断和主角之间的距离是否小于收集距离\n        // if (this.getPlayerDistance() < this.pickRadius) {\n        //     // 调用收集行为\n        //     this.onPicked();\n        //     return;\n        // }\n    }\n}\n"]}